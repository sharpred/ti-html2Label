{
  "name": "tiapp.xml",
  "version": "0.2.4",
  "description": "Titanium tiapp.xml parsing and manipulation API",
  "keywords": [
    "titanium",
    "appcelerator",
    "alloy"
  ],
  "homepage": "git://github.com/tonylukasavage/tiapp.xml.git",
  "bugs": {
    "url": "https://github.com/tonylukasavage/tiapp.xml/issues",
    "email": "anthony.lukasavage@gmail.com"
  },
  "license": "MIT",
  "author": {
    "name": "Tony Lukasavage",
    "email": "anthony.lukasavage@gmail.com",
    "url": "http://tonylukasavage.com"
  },
  "main": "./lib/tiapp.xml.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tonylukasavage/tiapp.xml.git"
  },
  "dependencies": {
    "pretty-data2": "~0.40.1",
    "xml2js": "^0.4.4",
    "xmldom": "~0.1.19"
  },
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-mocha-test": "~0.10.0",
    "grunt-contrib-jshint": "~0.10.0",
    "should": "~3.3.0",
    "lodash": "~2.4.1",
    "grunt-contrib-clean": "~0.5.0"
  },
  "engines": {
    "node": ">=0.10"
  },
  "gitHead": "f145fff3a343c3e1f46b25fb4f5345de8c06e2fa",
  "readme": "# tiapp.xml [![Build Status](https://travis-ci.org/tonylukasavage/tiapp.xml.svg?branch=master)](https://travis-ci.org/tonylukasavage/tiapp.xml) [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\n\nA node.js parsing and manipulation API module for Appcelerator's [Titanium](http://www.appcelerator.com/titanium/) tiapp.xml configuration file. It makes it exceedingly easy now to read and modify entries in the tiapp.xml file programmatically. No need to manually parse XML anymore, but [you can](#doc) if you so choose.\n\nFor complete details regarding tiapp.xml files, please consult Appcelerator's [full documentation](http://docs.appcelerator.com/titanium/latest/#!/guide/tiapp.xml_and_timodule.xml_Reference).\n\n\n\n## Install [![NPM version](https://badge.fury.io/js/tiapp.xml.svg)](http://badge.fury.io/js/tiapp.xml)\n\n```bash\n$ npm install tiapp.xml\n```\n\n## Examples\n\n### Change the Titanium SDK version\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\ntiapp.sdkVersion = '3.2.2.GA';\ntiapp.write();\n```\n\n### Disable analytics\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\ntiapp.analytics = false;\ntiapp.write();\n```\n\n### Add a new native module for android\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\ntiapp.setModule('com.tonylukasavage.someCoolModule', '1.0', 'android');\ntiapp.write();\n```\n\n### Print the tiapp.xml from the tiapp object\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\nconsole.log(tiapp.doc.toString());\n```\n\n## API\n\n* module APIs\n\t* [load](#loadfile)\n\t* [parse](#parsexmlstring-filename)\n\t* [find](#find)\n* tiapp APIs\n\t* [toString](#tostring)\n\t* [write](#writefile)\n\t* [top-level elements](#top-level-elements)\n\t* [getDeploymentTarget](#getdeploymenttargetplatform)\n\t* [getDeploymentTargets](#getdeploymenttargets)\n\t* [setDeploymentTarget](#setdeploymenttargetplatform-value)\n\t* [setDeploymentTargets](#setdeploymenttargetsobj)\n\t* [getProperty](#getpropertyname)\n\t* [setProperty](#setpropertyname-value-type)\n\t* [removeProperty](#removepropertyname)\n\t* [getModules](#getmodules)\n\t* [setModule](#setmoduleid-version-platform)\n\t* [removeModule](#removemoduleid-platform)\n\t* [getPlugins](#getplugins)\n\t* [setPlugin](#setpluginid-version)\n\t* [removePlugin](#removepluginid)\n\t* [doc](#doc)\n\n### load(file)\n\nLoad a tiapp.xml file and return a Tiapp object. If `file` is undefined, [find()](#find) will attempt to locate a tiapp.xml file.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\n```\n\n### parse(xmlString, filename)\n\nParse an xml string as a tiapp.xml document and return a Tiapp object. This is used by `load()` and generally isn't used directly. `filename` is optional, and is used only as a default value if you attempt to [write()](#writefile) later.\n\n```js\nvar tiapp = require('tiapp.xml').parse('<ti:app><!-- the rest of the tiapp.xml --></ti:app>');\n```\n\n### find()\n\nFind a tiapp.xml file and return its file path. It will start by searching the current working directory for a tiapp.xml file. If it doesn't find it, it will continue to move up the folder hierarchy attempting to find tiapp.xml files. If it never finds a tiapp.xml, it returns `null`.\n\n```js\nvar pathToTiappXml = require('tiapp.xml').find();\n```\n\n### toString()\n\nReturn the string representation of the tiapp.xml file.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\nconsole.log(tiapp.toString());\n```\n\n### write([file])\n\nWrite the current Tiapp object out as a tiapp.xml file to `file`. If `file` is undefined, it will use the file supplied in the inital [load()](#loadfile) or [parse()](#parsexmlstring-filename) call. If it still can't find a file, an exception with be thrown.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\n\n// disable analytics\ntiapp.analytics = false;\n\n// write out the changes to \"./tiapp.xml\"\ntiapp.write();\n\n// or write out to an explicit location\ntiapp.write('/path/to/tiapp.xml');\n```\n\n### top-level elements\n\nGet and set [top-level tiapp.xml elements](http://docs.appcelerator.com/titanium/latest/#!/guide/tiapp.xml_and_timodule.xml_Reference-section-29004921_tiapp.xmlandtimodule.xmlReference-TopLevelElements) directly as properties. These properties can be referenced in dash form or camel case. For example, to work with the `sdk-version` you can use either `tiapp['sdk-version']` or `tiapp.sdkVersion`.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\n\n// prints the name and guid of the app\nconsole.log(tiapp.name + ': ' + tiapp.guid);\n\n// disable analytics\ntiapp.analytics = false;\n\n// change the sdk version\ntiapp['sdk-version'] = '3.2.2.GA';\n```\n\n### getDeploymentTarget(platform)\n\nReturn a boolean indicating whether or not the given `platform` is enabled. If no `platform` is given, [getDeploymentTargets](#getdeploymenttargets) is called instead.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\nconsole.log(tiapp.getDeploymentTarget('android'));\n```\n\nThe previous code would print `true` if the `deployment-targets` section of your tiapp.xml looked something like this:\n\n```xml\n<deployment-targets>\n\t<target device=\"android\">true</target>\n</deployment-targets>\n```\n\n### getDeploymentTargets()\n\nReturn an object representation of all the deployment target elements.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\nconsole.log(tiapp.getDeploymentTargets());\n```\n\nThe previous code executed against a tiapp.xml that had everything but Tizen enabled would print this:\n\n```js\n{\n\tandroid: true,\n\tblackberry: true,\n\tipad: true,\n\tiphone: true,\n\tmobileweb: true,\n\ttizen: false\n}\n```\n\n### setDeploymentTarget(platform, value)\n\nEnable or disable a platform. If `platform` is an object, [setDeploymentTargets](#setdeploymenttargetsobj) is called instead.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\ntiapp.setDeploymentTarget('android', false);\ntiapp.write();\n```\n\nThe previous code would write a `deployment-targets` entry something like this:\n\n```xml\n<deployment-targets>\n\t<target device=\"android\">false</target>\n</deployment-targets>\n```\n\n### setDeploymentTargets(obj)\n\nEnabled or disable all platforms at once. `obj` is an object representation of all deployment targets.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\n\n// get existing list of deployment targets\nvar targets = tiapp.getDeploymentTarget();\n\n// disable tizen and blackberry\ntargets.blackberry = false;\ntargets.tizen = false;\ntiapp.setDeploymentTargets(targets);\n\n// or use an object literal to do the same without the getDeploymentTargets() call\ntiapp.setDeploymentTargets({\n\tandroid: true,\n\tblackberry: false,\n\tipad: true,\n\tiphone: true,\n\tmobileweb: true,\n\ttizen: false\n});\n\ntiapp.write();\n```\n\n### getProperty(name)\n\nGet a tiapp.xml [application property](http://docs.appcelerator.com/titanium/latest/#!/guide/tiapp.xml_and_timodule.xml_Reference-section-29004921_tiapp.xmlandtimodule.xmlReference-ApplicationProperties) value.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\nconsole.log(tiapp.getProperty('ti.ui.defaultunit')); // prints \"system\"\n```\n\n### setProperty(name, [value], [type])\n\nSet a tiapp.xml [application property](http://docs.appcelerator.com/titanium/latest/#!/guide/tiapp.xml_and_timodule.xml_Reference-section-29004921_tiapp.xmlandtimodule.xmlReference-ApplicationProperties).\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\n\n// with just a value\ntiapp.setProperty('ti.ui.defaultunit', 'dp');\n\n// or with a value and type\ntiapp.setProperty('ti.ui.defaultunit', 'dp', 'string');\n\ntiapp.write();\n```\n\n### removeProperty(name)\n\nRemove an [application property](http://docs.appcelerator.com/titanium/latest/#!/guide/tiapp.xml_and_timodule.xml_Reference-section-29004921_tiapp.xmlandtimodule.xmlReference-ApplicationProperties) from the tiapp.xml.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\ntiapp.removeProperty('ti.ui.defaultunit');\ntiapp.write();\n```\n\n### getModules()\n\nGet an array of objects representing modules listed in the tiapp.xml.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\nvar modules = tiapp.getModules();\n\n// iterate through a list of modules from the tiapp.xml\nmodules.forEach(function(mod) {\n\t// read access to properties on module object\n\tconsole.log('id=%s,version=%s,platform=%s',\n\t\tmod.id, mod.version || '<no version>', mod.platform || '<no platform>');\n});\n```\n\n### setModule(id, [version], [platform])\n\nAdd or update a module in the tiapp.xml.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\n\n// Add the ti.cloud module\ntiapp.setModule('ti.cloud');\n\n// Set the version of ti.cloud to 2.0\ntiapp.setModule('ti.cloud', '2.0');\n\n// Add a platform-specific module\ntiapp.setModule('ti.cloud', '1.0', 'android');\n\n// add with object for attributes\ntiapp.setModule('some.module', {\n\tplatform: 'android',\n\tversion: '3.3'\n});\n\n// Add one more module, no additional details\ntiapp.setModule('com.tonylukasavage.nothing');\n\ntiapp.write();\n```\n\nThe resulting tiapp.xml `<modules>` section would look like this:\n\n```xml\n<modules>\n\t<module version=\"2.0\">ti.cloud</module>\n\t<module version=\"1.0\" platform=\"android\">ti.cloud</module>\n\t<module version=\"3.3\" platform=\"android\">some.module</module>\n\t<module>com.tonylukasavage.nothing</module>\n</modules>\n```\n\n### removeModule(id, [platform])\n\nRemove a module from the tiapp.xml.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\n\n// remove ti.cloud module that is _not_ platform-specific\ntiapp.removeModule('ti.cloud');\n\n// remove a platform-specific ti.cloud entry\ntiapp.removeModule('ti.cloud', 'android');\n\ntiapp.write();\n```\n\n### getPlugins()\n\nGet an array of objects representing plugins listed in the tiapp.xml.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\nvar plugins = tiapp.getPlugins();\n\n// iterate through a list of plugins from the tiapp.xml\nplugins.forEach(function(plugin) {\n\t// read access to properties on plugin object\n\tconsole.log('id=%s,version=%s', plugin.id, plugin.version || '<no version>');\n});\n```\n\n### setPlugin(id, [version])\n\nAdd or update a plugin in the tiapp.xml.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\n\n// Add the ti.alloy plugin\ntiapp.setPlugin('ti.alloy');\n\n// Set the version of ti.alloy to 2.0\ntiapp.setModule('ti.alloy', '2.0');\n\ntiapp.write();\n```\n\nThe resulting tiapp.xml `<plugins>` section would look like this:\n\n```xml\n<plugins>\n\t<plugin version=\"2.0\">ti.alloy</plugin>\n</plugins>\n```\n\n### removePlugin(id)\n\nRemove a plugin from the tiapp.xml.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\ntiapp.removePlugin('ti.alloy');\ntiapp.write();\n```\n\n### doc\n\nA direct reference to the underlying XML Document object as supplied by [xmldom](https://github.com/jindw/xmldom). You will not need to use this in most cases and should use the tiapp.xml module APIs instead.\n\n```js\nvar tiapp = require('tiapp.xml').load('./tiapp.xml');\nconsole.log(tiapp.doc.documentElement.nodeName); // prints \"ti:app\"\n```\n\n## Todo\n\n* Platform-specific tiapp.xml sections\n",
  "readmeFilename": "README.md",
  "_id": "tiapp.xml@0.2.4",
  "_shasum": "480f6e6f08dec4306ea91741da407d39290f5047",
  "_from": "git://github.com/sharpred/tiapp.xml.git",
  "_resolved": "git://github.com/sharpred/tiapp.xml.git#f145fff3a343c3e1f46b25fb4f5345de8c06e2fa"
}
